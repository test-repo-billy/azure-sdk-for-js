/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ApplicationGroupOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { EventHubManagementClient } from "../eventHubManagementClient";
import {
  ApplicationGroup,
  ApplicationGroupCreateOrUpdateApplicationGroupOptionalParams,
  ApplicationGroupCreateOrUpdateApplicationGroupResponse,
  ApplicationGroupDeleteOptionalParams,
  ApplicationGroupGetOptionalParams,
  ApplicationGroupGetResponse,
} from "../models";

/** Class containing ApplicationGroupOperations operations. */
export class ApplicationGroupOperationsImpl
  implements ApplicationGroupOperations
{
  private readonly client: EventHubManagementClient;

  /**
   * Initialize a new instance of the class ApplicationGroupOperations class.
   * @param client Reference to the service client
   */
  constructor(client: EventHubManagementClient) {
    this.client = client;
  }

  /**
   * Creates or updates an ApplicationGroup for a Namespace.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param applicationGroupName The Application Group name
   * @param parameters The ApplicationGroup.
   * @param options The options parameters.
   */
  createOrUpdateApplicationGroup(
    resourceGroupName: string,
    namespaceName: string,
    applicationGroupName: string,
    parameters: ApplicationGroup,
    options?: ApplicationGroupCreateOrUpdateApplicationGroupOptionalParams,
  ): Promise<ApplicationGroupCreateOrUpdateApplicationGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        namespaceName,
        applicationGroupName,
        parameters,
        options,
      },
      createOrUpdateApplicationGroupOperationSpec,
    );
  }

  /**
   * Deletes an ApplicationGroup for a Namespace.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param applicationGroupName The Application Group name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    namespaceName: string,
    applicationGroupName: string,
    options?: ApplicationGroupDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, applicationGroupName, options },
      deleteOperationSpec,
    );
  }

  /**
   * Gets an ApplicationGroup for a Namespace.
   * @param resourceGroupName Name of the resource group within the azure subscription.
   * @param namespaceName The Namespace name
   * @param applicationGroupName The Application Group name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    namespaceName: string,
    applicationGroupName: string,
    options?: ApplicationGroupGetOptionalParams,
  ): Promise<ApplicationGroupGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, namespaceName, applicationGroupName, options },
      getOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateApplicationGroupOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/applicationGroups/{applicationGroupName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.applicationGroupName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/applicationGroups/{applicationGroupName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.applicationGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/applicationGroups/{applicationGroupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationGroup,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.namespaceName,
    Parameters.applicationGroupName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
