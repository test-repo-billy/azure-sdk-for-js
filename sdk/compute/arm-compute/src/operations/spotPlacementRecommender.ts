/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SpotPlacementRecommender } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ComputeManagementClient } from "../computeManagementClient.js";
import {
  SpotPlacementRecommenderGetOptionalParams,
  SpotPlacementRecommenderGetResponse,
  SpotPlacementRecommenderInput,
  SpotPlacementRecommenderPostOptionalParams,
  SpotPlacementRecommenderPostResponse,
} from "../models/index.js";

/** Class containing SpotPlacementRecommender operations. */
export class SpotPlacementRecommenderImpl implements SpotPlacementRecommender {
  private readonly client: ComputeManagementClient;

  /**
   * Initialize a new instance of the class SpotPlacementRecommender class.
   * @param client Reference to the service client
   */
  constructor(client: ComputeManagementClient) {
    this.client = client;
  }

  /**
   * [SOON TO BE DEPRECATED] Gets Spot Placement Recommender diagnostic metadata.
   * @param location The name of the Azure region.
   * @param options The options parameters.
   */
  get(
    location: string,
    options?: SpotPlacementRecommenderGetOptionalParams,
  ): Promise<SpotPlacementRecommenderGetResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      getOperationSpec,
    );
  }

  /**
   * [SOON TO BE DEPRECATED] Generates placement scores for Spot VM skus.
   * @param location The name of the Azure region.
   * @param spotPlacementRecommenderInput SpotPlacementRecommender object supplied in the body of the
   *                                      Post spot placement recommender operation.
   * @param options The options parameters.
   */
  post(
    location: string,
    spotPlacementRecommenderInput: SpotPlacementRecommenderInput,
    options?: SpotPlacementRecommenderPostOptionalParams,
  ): Promise<SpotPlacementRecommenderPostResponse> {
    return this.client.sendOperationRequest(
      { location, spotPlacementRecommenderInput, options },
      postOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/spotPlacementRecommender",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ComputeDiagnosticBase,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const postOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/diagnostics/spotPlacementRecommender/generate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SpotPlacementRecommenderResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.spotPlacementRecommenderInput,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
